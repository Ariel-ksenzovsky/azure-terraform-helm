name: Build , Test and Deploy an app to AKS

on:
  push:
    branches: [ "main" ]
    paths:
      - "charts/**"
  pull_request:
    branches: [ "main" ]
    paths:
      - "charts/**"
    
  workflow_run:
    workflows: ["CI"]  # Replace with the name of your CI workflow
    types:
      - completed  # Trigger only when the CI pipeline is completed

concurrency:
  group: deploy-main  # Ensures only one deployment at a time
  cancel-in-progress: true


jobs:
  deploy:
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}  # Ensure the job runs only if CI succeeds
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:

      - name: sleep for 1 minte to see if Concurrncy is working
        run: sleep 60 
      
        # Checks out the repository this file is in
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_wrapper: false


      - name: Configure AWS Credentials # for s3 tf remote state - accessing s3 bucket.
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      # Logs in with your Azure credentials
      - name: Azure login
        run: |
          set -ex
          az login --service-principal \
              --username "${{ secrets.AZURE_CLIENT_ID }}"  \
              --password "${{ secrets.AZURE_CLIENT_SECRET }}" \
              --tenant "${{ secrets.AZURE_TENANT_ID }}"

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Terraform Init
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          cd terraform-azure
          terraform init

      - name: Terraform Apply # update cluster infrastructure.
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          cd terraform-azure
          terraform apply -auto-approve

      - name: setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.0'
          
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
            version: v3.12.0  # Update to latest version if needed
        
      - name: Update Helm Chart Version
        run: |
          CHART_VERSION="1.0.${{ github.run_number }}"
          echo "Updating Chart version to $CHART_VERSION"
          sed -i "s/^version:.*/version: $CHART_VERSION/" charts/flask-app/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: $CHART_VERSION/" charts/flask-app/Chart.yaml
          cat charts/flask-app/Chart.yaml  # Debugging to verify update
            
      - name: Package Helm Chart
        run: |
          helm package charts/flask-app
          mv flask-app-*.tgz charts/
  
      - name: Upload Helm Chart to S3
        run: |
          aws s3 cp charts/flask-app-*.tgz s3://helm-flask-star-images/charts/
  
      - name: Generate and Upload index.yaml
        run: |
          helm repo index charts/ --url https://helm-flask-star-images.s3.amazonaws.com/charts 
          aws s3 cp charts/index.yaml s3://helm-flask-star-images/charts/index.yaml
  
      - name: Verify Helm Repo
        run: |
          helm repo add flask-repo https://helm-flask-star-images.s3.amazonaws.com/charts
          helm repo update

      - name: Set AKS Context # uses az aks get-credentials internally.
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ vars.AZURE_CLUSTER_RESOURCE_GROUP }}
          cluster-name: ${{ vars.AZURE_CLUSTER_NAME }}


      - name: deploy flask-app to k8s
        run: |
          set -ex
          kubectl delete all --all


      - name: deploy flask-app to k8s
        run: |
          set -ex
          cd charts
          helm upgrade --install flask-app flask-app

        
        
